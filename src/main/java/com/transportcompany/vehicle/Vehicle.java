package com.transportcompany.vehicle;

/**
 * <p>Определяет основной контракт для любого "подвижного состава" (вагона или локомотива) в поезде.</p>
 * <p>Этот интерфейс задает базовые характеристики и поведение, общие для всех типов вагонов,
 * позволяя работать с ними полиморфно (т.е. одинаково обращаться к разным типам вагонов через этот общий интерфейс).</p>
 *
 * <p><b>Почему интерфейс?</b></p>
 * <ul>
 *     <li>Определяет контракт без реализации, позволяя разным классам (пассажирский, ресторан и т.д.) предоставить свою специфику.</li>
 *     <li>Поддерживает слабую связанность: компоненты системы (например, класс {@link com.transportcompany.train.Train}) зависят от этого интерфейса, а не от конкретных реализаций вагонов.</li>
 *     <li>Обеспечивает гибкость: легко добавить новые типы вагонов в будущем, просто реализовав этот интерфейс.</li>
 * </ul>
 *
 * @see com.transportcompany.vehicle.AbstractVehicle Абстрактная реализация базовых полей и методов.
 * @see com.transportcompany.train.Train Класс, использующий объекты Vehicle для формирования поезда.
 */
public interface Vehicle {

    /**
     * <p>Возвращает пассажирскую вместимость вагона.</p>
     * <p>Для непассажирских вагонов (например, локомотив, багажный) это значение может быть 0,
     * но метод должен быть реализован.</p>
     *
     * @return Максимальное количество пассажиров, которое может перевозить данный вагон (целое неотрицательное число).
     */
    int getCapacity();

    /**
     * <p>Возвращает номинальную вместимость багажа вагона.</p>
     * <p>Это может быть объем, вес или условная единица, в зависимости от контекста проекта.
     * В данном проекте предполагается, что это условная единица или объем для пассажирских вагонов,
     * и 0 для локомотива. Для багажного вагона это значение может совпадать с {@link BaggageCar#getMaxWeightCapacity()},
     * но семантически это общая характеристика для сравнения.</p>
     *
     * @return Вместимость багажа (дробное неотрицательное число).
     */
    double getBaggageCapacity();

    /**
     * <p>Возвращает строковое представление типа вагона.</p>
     * <p>Это имя должно быть достаточно информативным для идентификации типа вагона (например, "PassengerCar", "RestaurantCar").
     * Для более специфичных типов (как {@link PassengerCar}), может включать подтип (например, "PassengerCar - Купе").</p>
     * <p><b>Важно:</b> Базовое имя типа (до " - ") используется в {@link com.transportcompany.db.TrainDao} для связи с таблицей `TrainCarTypes`.</p>
     *
     * @return Строка, описывающая тип вагона. Не должна быть null или пустой.
     */
    String getVehicleType();

    /**
     * <p>Возвращает условный уровень комфорта вагона.</p>
     * <p>Это может быть числовая оценка (например, от 1 до 10), используемая для сортировки
     * или фильтрации вагонов. Более высокое значение обычно означает больший комфорт.</p>
     *
     * @return Уровень комфорта (целое неотрицательное число).
     */
    int getComfortLevel();

    // --- Сеттеры ---
    // Сеттеры добавлены в интерфейс, чтобы позволить контроллеру изменять свойства вагона
    // перед сохранением. Это может быть спорным решением с точки зрения неизменяемости (immutability),
    // но в данном контексте упрощает редактирование через UI. Альтернативой было бы создание
    // нового объекта вагона при редактировании.

    /**
     * <p>Устанавливает новую пассажирскую вместимость вагона.</p>
     * <p>Реализации должны проверять корректность входного значения (например, неотрицательность).</p>
     *
     * @param capacity Новая вместимость (должна быть неотрицательной).
     * @throws IllegalArgumentException если вместимость некорректна (например, отрицательная).
     */
    void setCapacity(int capacity);

    /**
     * <p>Устанавливает новую вместимость багажа.</p>
     * <p>Реализации должны проверять корректность входного значения (неотрицательность).</p>
     *
     * @param baggageCapacity Новая вместимость багажа (должна быть неотрицательной).
     * @throws IllegalArgumentException если вместимость багажа некорректна.
     */
    void setBaggageCapacity(double baggageCapacity);

    /**
     * <p>Устанавливает новый уровень комфорта.</p>
     * <p>Реализации должны проверять корректность входного значения (неотрицательность).</p>
     *
     * @param comfortLevel Новый уровень комфорта (должен быть неотрицательным).
     * @throws IllegalArgumentException если уровень комфорта некорректен.
     */
    void setComfortLevel(int comfortLevel);

    // --- Идентификатор для работы с БД ---

    /**
     * <p>Возвращает уникальный идентификатор вагона, присвоенный базой данных.</p>
     * <p>Этот ID используется для операций обновления и удаления конкретного вагона в БД.
     * Для новых, еще не сохраненных вагонов, этот ID обычно равен 0 или не установлен.</p>
     *
     * @return Уникальный идентификатор вагона из БД, или 0 (или другое значение по умолчанию), если вагон не сохранен.
     * @see com.transportcompany.db.TrainDao#saveTrain(com.transportcompany.train.Train) Логика сохранения и получения ID из БД.
     */
    int getId();

    /**
     * <p>Устанавливает уникальный идентификатор вагона.</p>
     * <p>Этот метод обычно вызывается {@link com.transportcompany.db.TrainDao} после загрузки вагона из базы данных,
     * чтобы объект в памяти знал свой ID в БД.</p>
     *
     * @param id Уникальный идентификатор, полученный из БД.
     */
    void setId(int id);
}